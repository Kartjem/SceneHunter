
steps:
  - name: 'node:18-alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "Installing dependencies..."
        npm ci
        echo "Running linting..."
        npm run lint
        echo "Running unit tests..."
        npm run test:ci
        echo "Building application..."
        npm run build
    dir: '.'
    id: 'test-and-build'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID'
      - '-t'
      - 'gcr.io/$PROJECT_ID/scenehunter-v2:latest'
      - '.'
    id: 'docker-build'
    waitFor: ['test-and-build']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID'
    id: 'docker-push-tagged'
    waitFor: ['docker-build']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/scenehunter-v2:latest'
    id: 'docker-push-latest'
    waitFor: ['docker-build']

  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running security scan..."
        gcloud container images scan gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID --quiet || true
    id: 'security-scan'
    waitFor: ['docker-push-tagged']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Auto-deployment disabled. Docker image built and pushed successfully."
        echo "Image: gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID"
        echo "To deploy manually, use:"
        echo "gcloud run deploy scenehunter-v2-dev --image gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID --platform managed --region europe-west1"
        echo "Skipping automatic deployment. Manual deployment required."
    id: 'skip-deploy'
    waitFor: ['docker-push-tagged', 'security-scan']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Cloud Deploy release creation disabled."
        echo "Docker image available at: gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID"
        echo "To create a release manually:"
        echo "gcloud deploy releases create release-$BUILD_ID --delivery-pipeline=scenehunter-v2-pipeline --region=europe-west1 --images=app=gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID"
        echo "Manual release creation required."
    id: 'skip-cloud-deploy'
    waitFor: ['skip-deploy']

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 50
  logging: CLOUD_LOGGING_ONLY
  dynamic_substitutions: true

timeout: '1800s'

logsBucket: 'gs://${PROJECT_ID}-build-logs'

substitutions:
  _FIREBASE_PROJECT_ID: 'scenehunter-v2'
  _REGION: 'europe-west1'

artifacts:
  images:
    - 'gcr.io/$PROJECT_ID/scenehunter-v2:$BUILD_ID'
    - 'gcr.io/$PROJECT_ID/scenehunter-v2:latest'

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/firebase-service-account/versions/latest
      env: 'FIREBASE_SERVICE_ACCOUNT'
