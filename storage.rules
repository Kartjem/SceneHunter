rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Users can upload their own avatars (max 5MB)
    match /users/avatars/{userId}/{allPaths=**} {
      allow read: if true; // Avatars are public
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidImageUpload() &&
        request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Location images can be uploaded by authenticated users (max 10MB)
    match /locations/images/{locationId}/{allPaths=**} {
      allow read: if true; // Location images are public
      allow write: if request.auth != null && 
        isValidImageUpload() &&
        request.resource.size < 10 * 1024 * 1024 && // 10MB limit
        hasLocationPermission(locationId);
    }
    
    // Thumbnails are generated server-side, read-only for clients
    match /locations/thumbnails/{locationId}/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only server functions can write thumbnails
    }
    
    // Movie content is admin-only
    match /movies/{allPaths=**} {
      allow read: if true; // Movie posters/stills are public
      allow write: if request.auth != null && isAdmin();
    }
    
    // Temp uploads for authenticated users (24h expiry, 20MB limit)
    match /temp/uploads/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidImageUpload() &&
        request.resource.size < 20 * 1024 * 1024; // 20MB limit
    }
    
    // Helper functions
    function isValidImageUpload() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.contentType in ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    }
    
    function hasLocationPermission(locationId) {
      return firestore.exists(/databases/(default)/documents/locations/$(locationId)) &&
             (firestore.get(/databases/(default)/documents/locations/$(locationId)).data.createdBy == request.auth.uid ||
              isAdmin());
    }
    
    function isAdmin() {
      return request.auth.token.admin == true;
    }
  }
}
