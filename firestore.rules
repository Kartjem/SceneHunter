rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Public health check collection for connection testing
    match /health/{docId} {
      allow read: if true;
      allow write: if false; // No writes allowed
    }
    
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId &&
        isValidUserData();
    }
    
    // Movies are read-only for all authenticated users, admins can write
    match /movies/{movieId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Locations can be created by authenticated users, updated by creators/admins
    match /locations/{locationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isValidLocation();
      allow update: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || isAdmin());
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Reviews can be created/updated by their authors
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && isValidReview();
      allow update: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Helper functions
    function isAdmin() {
      return request.auth.token.admin == true;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt']) &&
             request.resource.data.email == request.auth.token.email;
    }
    
    function isValidLocation() {
      return request.resource.data.keys().hasAll(['name', 'coordinates', 'movieId', 'createdBy']) &&
             request.resource.data.createdBy == request.auth.uid &&
             request.resource.data.coordinates is latlng;
    }
    
    function isValidReview() {
      return request.resource.data.keys().hasAll(['userId', 'locationId', 'rating']) &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.rating is number &&
             request.resource.data.rating >= 1 && request.resource.data.rating <= 5;
    }
  }
}
